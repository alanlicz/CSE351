****************************** Lab 3 Synthesis Questions ******************************Name(s): Alan Li, Ivan BelikovNetID(s): tianyl28, ivanb13-----------------------------------------------------------1) Explain:  When filling the array past its allocated bounds, the return address back to main() was overwritten by the values being filled in by fillArray(). Therefore, when the the instruction "<part2+63>: retq" gets executed, the function is given a return address to an inaccessible location, causing a segmentation fault to occur. After FillArray() is executed, the top of the stack contains the values used to fill the array and, because we over filled the array, the return address was overwritten on the stack. Thus, when executing the retq instruction, the program tries to return to that value generated by fillArray(), rather than the original return address to main(), and is unable to return properly, causing a segmentation fault. -----------------------------------------------------------2) Instruction 1: <part2 + 14> lea 0x10(%rsp),%rax   Purpose:Sets the starting point of the array to be %rsp + 10. %rax now has the value 0x7fffffffd520 which is 56 bytes away from the return address 0x7fffffffd558. Since each int takes 4 bytes, this means there is 14 space to allocate for int array.   Instruction 2: <part2 + 24> mov %rax %rdi      Purpose:Pass first argument into fillArray(), the int values starts to fill the array. %rdi is the starting address where the number starts to fill in.    Minimum length to cause a seg fault: 15   Calculation: return address(0x7fffffffd558) â€“ start address of array(0x7fffffffd520) = 56, so that means 14 4bytes or 14 ints. Writing 14 ints will stop right in front of return address. Writing one more int will overwrite the return address and cause segmentation fault.-----------------------------------------------------------3) Agree or Disagree: Disagree   Explain: We disagree with this claim.Even if we store the array on the heap, there is still no bounds checking being done by the compiler. Therefore, there is still the possibility that we may overfill the array and over run the space originally allocated to the array on the heap, overwriting/corrupting other memory on the heap that's seperate from the array and possibly used by other programs. Initially, when memory on the heap is overwritten/corrupted, the behavior will be undefined. But, a segmentation fault may occur later on if a program needs to use any of the memory that was corrupted/overwritten on the heap. Thus, I disagree with this claim and do not believe that creating an array on the heap would remove the possibility of segmentation fault's occuring.   -----------------------------------------------------------